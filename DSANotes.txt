    int a='a';
    cout<<a<<endl;
it prints ASCII value of the a (95)

 
For all -ve numbers cpp converts it to binary by ignoring -ve sign and then converts that into 2's complement and then stores that and the MSB is set to 1 and while reading it checks that and then updates that also

To find primes any iteration beyond n/2 (n=number given) is meaningless 


For patterns read no of rows and no of col and find pattern.. and then derive formula from that 
Use only one or * in cout, the rest should be inside for loops 
eg: Print "* * * *" 4 times, instead wrting that in one while loop along with i we write it in 2 while 
    int i = 1;
    while (i <= 4)
    {
        int j = 1;
        while (j <= 4)
        {
            cout << "*";
        }
        cout << "/n";
        i++;
    }


Bitwise Operators: &, <<, >>, |, ^

    //a AND b for 4 and 6 (100 & 110 we get 100)
    cout << "a&b" << (a & b) << endl;
    //output: 4


    //a OR b for 4 and 6 (100 & 110 we get 110)
    cout << "a|b" << (a & b) << endl;
    //output: 6


    // NOT(a) [Flip 1s and 0s] for 4 (100 we get 011) for 6 (110 we get 001)    
    cout << "~a" << (a & b) << endl;
    //output: -5
    //NOT will flip all the bytes, so 000...100 (which is 4) if NOT is added will be flippeed to (the first  one on right is MSB)111...011 etc

    //when compiler reads this, it sees the MSB (and there's 1 there) so it takes 1's complement so inverts bits again, so 000...100 

    //now takes 2's complement so adds 1 to LSB, so 000...100+1 = 000..101
    which is read as -5 (coz initially it saw 1 and assumed it was -ve)



    // a XOR b [0-1 or 1-0 is 1 but 0-0 or 1-1 is 0] for 4^6 (100^110 we get 010 )
    cout << "a^b" << (a & b) << endl;
    //output: 2


IN BOTH LEFT AND RIGHT SHIFTS THE NUMBERS ADDED ON EITHER SIDES WILL BE 0 FOR +VE NUMBERS (i.e, 3<<2 or 5<<1 after shifting the extra space formed/deleted will have 0's in it)

BUT FOR -VE NUMBERS IT'S DEPENDENT ON THE COMPILER

<< is for left shift 
 eg: 3<<2 is same as telling the left most part of the number to shift left twice (will shift even if they are 0's)

GENERALLY num<<1 WILL BE num*2, FOR SMALL NUMBERS, AS THEY LARGER THEY DIVERGE

(if there's a large num, eg: one that occupies all the bit of int datatype, on left shift, that one bit that occupies the last place will shift to -ve spot and therefore give -ve number)


   for 3<<2:    000...011 << 2 we get  000...1100 (both the 1's are shifted 2 times towards left)
   000...1100 is 12

   for 5<<2:   000...101 << 1 we get 000...1010 (the 101 is shifted one digit towardss left) so 10

    cout << "5<<1 " << (5 << 1) << endl;
    //output: 10
    
    cout << "3<<2 " << (3 << 2) << endl;
    // output: 12

    cout << "3<<1 " << (3 << 1) << endl;
    // output: 6

    cout << "6<<1 " << (6 << 1) << endl;
    // output: 12
    
    cout << "7<<1 " << (7 << 1) << endl;
    // output: 14 



>> is for right shift 
 eg: 3>>2 is same as telling the right most part of the number to shift right twice 


GENERALLY num>>1 WILL BE num/2 (for num>>2 will be num/(2*2)), FOR SMALL NUMBERS, so for 3>>2 we have 0 on int division and for 5>>2 we have 5/4 which gives 1 on int division

 for 3>>2:    000...011 >> 2 we get  000...000 (both the 1's are shifted 2 times towards right and therefore deleted)
   000...0000 is 0

 for 5>>2:    000...101 >> 2 we get  000...001 (the 01 in the end is shifted 2 times towards right and therefore deleted)
   000...0001 is 1

    cout << "5>>1 " << (5 >> 1) << endl;
    // output: 2

    cout << "3>>2 " << (3 >> 2) << endl;
    // output: 0

    cout << "3>>1 " << (3 >> 1) << endl;
    // output: 1

    cout << "6>>1 " << (6 >> 1) << endl;
    // output: 3

    cout << "7>>1 " << (7 >> 1) << endl;
    // output: 3


break; comes out of the entire statement inside a for loop
continue; will continue the statement (i.e, if we wnat to skip an iteration etc..)


1. To reverse integers first divide them by 2 store remainder
2. divide the resulting quotient with 2 and store remainder
3. Repeat process till we get 1 or 0 in the end 
4. reverse the string

                        **Arrays**
                Pre defined data structure


int arr[5]; INITIALIZE the array
int arr[]={1,2,4}  can also intialize like this, without mentioning size of arr and allocating values as we go

array index starts at 0 so in arr[]={1,2,4} arr[0]=1, arr[1]=2 and so on

uninitailized values are either garbarge values or are 0
        int arr[5];         //will hvae 4 indexes coz index itself starts at 0
        for(int i=0;i<5;i++){
            cout<<arr[i];
        }
        o/p: 6422224 6422280 6422476 2005978304 -2145479712  
            //returns garbarge value
    
**But using arr[5] ={0}; will intialize all values in array to 0**

The above only works for 0, if arr[5] = {1} it will only intialize arr[0] to 1 the rest will be 0 or garbarge values


To intialize all values we can use std::fill_n
#include <iostream>
#include <algorithm>

int main() {
    int *arr = new int[10];
    std::fill_n(arr, 10, -1);

    for (size_t i = 0; i < 10; i++) {
        std::cout << arr[i] << " ";
    }

    return 0;
}


Linear Search: Searches elements one by one and checks for key, O(n)

Binary Search: It works only in inc or decreasing func (sorted arrays) O(log n)

3 elements in a binary search, start, end and mid element

    array: [1, 2, 3, 4, 5].
    let's say the key is 5.
Now, let's start the binary search algorithm:

Step 1:

Set start to the index of the first element (0) and high to the index of the last element (4) (arr.size()-1) of the array.
low = 0
high = 4
Calculate the mid index as the average of low and high.
mid = (0 + 4) / 2 = 2

Compare the value at index mid (element 3) with the key (3).
array[mid] = array[2] = 3

Which is not the key, (key =5) and here key is >3 
we now need to shift the start element to (mid+1), so 
        st= mid+1; (2+1=3)

the subarray (4,5) is now considered (coz start is pointing to 3 or 3rd index of the array)

from [4,5] (index 3 and 4 are consider for mid = (3+4)/2 => 3)

arr[3]: 4 != key and the value is < key(5) 

since key > we shift start again to mid+1 (3+1=4)

sub array [5] is retuned and mid is Calculated and it's == to key and value is returned 

SIMILARLY IF KEY< ARR[mid] we would shift end to mid-1

IF (st>end) it means that start or end is now pointing to a garbarge value and that key is not found


                        **BINARY SEARCH** 
                         
 int st = 0, end = arr.size() - 1, mid;
    mid = (end + st) / 2;
    while (st <= end)
    {
        if (arr[mid] == key)
        {
            cout << "in binSearch func, key found" << endl;
            return mid;
        }
        if (key > arr[mid])
        {
            st = mid + 1;
        }
        if (key < arr[mid])
        {
            end = mid - 1;
        }
        mid = (st + end) / 2;
    }
    return -1; //element is not found 


