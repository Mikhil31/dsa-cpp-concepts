identfiers are any names that we provide in cpp, i.e, names of objects, classes, functions etc...

 "cout >>" is used read line and "cin <<" is used to read line

keywords are reserved and have special meaning to the compiler and cannot be used anywhere by the use, eg: print, int, namespace, class etc...

reserved identfiers are identfiers that are already defined during compiler design eg: main, include etcc.. they can be used in as identfiers.

to find array size dynamicall use auto i : arr

auto keyword is used to declare a variable with its type automatically deduced by the compiler based on the value assigned to it.


pointers are address to a variable, if var is stored at 1008 then int *p_var will be 1008, i.e, the address of the variable.

int*, int * ptr and int *ptr are all the same.

    int a=50;
    int *ptr=&a;
this is called referencing a pointer
*ptr basically points to address of a, to assign the addr of var a to ptr we use &a
    cout<<ptr<<endl;

this directly changes value of the address, so if a is refered after changing it changes address of a directly, rather than changing a
   
    *ptr=60;

this is called dereferencing a pointer
it gets the goes to address of ptr and points to address stored in ptr and gets value from there.
    cout<<*ptr<<endl;
    cout<<a<<endl;

ALWAYS INITIALIZE A VAR AND THEN A POINTER TO IT, never assign values to just pointers, it might cause bugs and run time errors.

nullptr command does not point the pointer anywhere
    int *ptr=nullptr;

if a var is of int or double etc, the pointer must also be of the same type, otherwise compiler error   

void* ptr can store pointer of any type of variable, to print address of char we use void* ptr temprorarily

memory managment unit helps in mapping virtual addr that program thinks it has to irl ram memory, done so to save space.

The memory map is a standard format defined by the OS. All programs written for that OS must conform to it. It is usually divided into some sections

memory map: has stack, heap, data, text etc.. the stack has constant var such as int a, double b etc... 
heap is dynamically allocated using malloc(), in heap the var assigned will exist with same name till it's explicitly assigned to different one or cancelled

to dynamically allocate use new eg
int a=77;
int *ptr=new int;
*ptr= a;
not &a coz not storing address but a itself

exit():

When a user wants to exit a program from this function is used.
It is a void return type function that calls all functions registered at the exit and terminates the program.
File buffers are flushed, streams are closed, and temporary files are deleted and hence memory is freed.



break():

This function is generally used to come out of a loop at the instant.
When a break statement is executed it transfers the control to the statements that follow the switch or loop.


SWTICH is used in place of multiple if-else blocks, after every switch condition we use break; or exit() [in case of infinite loops]
 
continue cannot be used inside a switch block

functions exist just to cut short the time taken/ no of LOC
function is a well defined task

#include <iostream>
using namespace std;
int power()
{
    int a, b, ans =1;
    cin >> a >> b;

    for (int i = 1; i <= b; i++)
    {
        ans = ans * a;
    }
    cout << "res is: " << ans << endl;
    return 0;
}

using namespace std;

int main()
{
    int a, b;
    power();
}

//Here a and b var in main are local only to main func and won't work if called outside, similarly a,b and ans in power function is available locally only to power()

stuff like this reduces code redundancy, instead of defining power again and again we can just define it ocne and call it in main, or we can use a for loop to continously give values


function call stack indicates/ tells us that functions inside are being called as in a stack data structure format

eg: in finding nCr we have 3 functions main,nCr(to find ncr) and factorial 

so in this initially stack will have 

        |factorial| 
        | nCr func|     (pops out factorial(), to calc factorial values)
        |main func| 


        (factorial gives output to nCr function)

        | nCr func|     (pops out nCr, to calc nCr value)
        |main func| 


        (nCr gives output to main function)
                        (pops out main, to return factorial values to main)
        |main func| 


        |         |  
        
        **IN THE END AN EMPTY STACK IS FORMED INDICATING PROGRAM COMPLETION**



                        **Pass By value**
int dummy(int a)
{
    a++;                            a is var allocated to dummy func
    cout << a << endl;
}

            a in dummy() and a in main() in ARE DIFFERENT
            when dummy(int a) is called by main,another 
            duplicate of a is created which is inside dummy() 

            we are passing the *value* of a to dummy() so
            we have 2 a's with different memory address 
            but same name 


int main()
{
    int a=5;
    dummy(a);                       a here is actually a variable from main
    cout << a << endl;
}


int arr[5]; INITIALIZE the array
int arr[]={1,2,4}  can also intialize like this, without mentioning size of arr and allocating values as we go

array index starts at 0 so in arr[]={1,2,4} arr[0]=1, arr[1]=2 and so on

uninitailized values are either garbarge values or are 0
        int arr[5];         //will hvae 4 indexes coz index itself starts at 0
        for(int i=0;i<5;i++){
            cout<<arr[i];
        }
        o/p: 6422224 6422280 6422476 2005978304 -2145479712  
            //returns garbarge value
    
**But using arr[5] ={0}; will intialize all values in array to 0**

The above only works for 0, if arr[5] = {1} it will only intialize arr[0] to 1 the rest will be 0 or garbarge values


To intialize all values we can use std::fill_n
#include <iostream>
#include <algorithm>

int main() {
    int *arr = new int[10];
    std::fill_n(arr, 10, -1);

    for (size_t i = 0; i < 10; i++) {
        std::cout << arr[i] << " ";
    }

    return 0;
}


Printing array with functions: 

int printArray(int arr[], int size)     

//we should know the size of the array or pass it as input as another parameter
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << " ";
        cout << " "<< i << "\n ";
    }
    return 0;
}

int main()
{
    int size = 9;
    int arr[size] = {0};
    printArray(arr, size);
}


sizeof() method is used to print the size of any datatype

eg: arr[10] 
    int sizeOfArr= sizeof(arr)+sizeof(int);
    // will give 10, coz each index in arr is 4 (so 4*10=40)
    // size of int is 4
    // so 40/4 is 10


EVEN IF WE INITIALIZE 15 ELEMENTS TO ARRAY BUT ONLY ALLOCATE 2 OR 3 ELEMENTS size_of(ARR) WILL BE 15, which is why we need to pass size as parameter to array function

Unlike var (like int,char etc) arrays can be accessed across functions 

int updateArr(int arr[], int size)
{

    cout << "in updateArr" << endl;

    //According to pass by value here array should be 5 (in updateArr)

    arr[0] = {5};
    for (int i = 0; i < 5; i++)
    {
        cout << arr[i] << "\t";
    }
}
            VALUE OF arr[0] IS 5 ACROSS THE PROGRAM
            COZ ARR HAS CONTIGOUS MEMORY AND THEREFORE
            THE WHOLE arr[] IS PASSED AS IT IS AND UPADATED  

            main func passes the starting address and therefore 
            the function will not make another copy

int main()
{
    int arr[] = {1, 2, 3, 4, 5};
    updateArr(arr, 5);

    //According to pass by value here array should be 1 (in main)

    cout << "in main" << endl;
    for (int i = 0; i < 5; i++)
    {
        cout << arr[i] << "\t";
    }
}

o/p: 5,2,3,4,5

To reverse an array we can't use a for loop starting with i=0 and another starting with j=0 and swapping it, we must use start and end var to swap stuff


 consider arr[]={1,2,3,4,5,6}

to swap we can just interchange elements, here: 
    1st iteration: {6,2,3,4,5,1} [swap 1 and 6]
    2nd iteration: {6,5,3,4,2,1} [swap 2 and 5]
    3rd iteration: {6,5,2,4,3,1} [swap 3 and 2]
    4th iteration: {6,5,2,4,3,1} [swap 4 and 4]


    int start= 0, end=5;
    while(start<end){
        temp=arr[start];
        arr[start]= arr[end];
        arr[end]= temp;
        start++;
        end--;
    }

                        **VECTORS**

                        
Vectors are dynamic arrays, they can vary in size and have extensive and additional methods compared to arrays

to use vectors we need to include #include <vector>

Creating a vector (just use vector<int> since we're using namespace)
std::vector<int> myVector; // creates an empty vector of integers


To access each element we can just use .size() method on the vector
    
    vector<int> aVector={0};

    for (int i = 0; i < aVector.size(); i++)
    {
        cout << aVector[i] << endl;
    }

Since vector is dynamically allocated, here the size of the vector is 1

to push elements inside a vector we can use push_back() func

    vector<int> aVector = {0};
    cout << "before pushing" << endl;
    cout << "size of vector now is: " << aVector.size() << endl;
    print(aVector);
    cout << "after pushing" << endl;
    aVector.push_back(1);
    aVector.push_back(2);
    aVector.push_back(3);
    print(aVector);
    cout << "size of vector now is: " << aVector.size() << endl;




